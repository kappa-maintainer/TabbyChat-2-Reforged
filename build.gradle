
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        maven { url = 'https://maven.outlands.top/releases' }
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.0.+', changing: true
        classpath "net.kyori:blossom:2.1.0"
        classpath "org.spongepowered:mixingradle:0.7.+"
        classpath 'com.github.johnrengelman:shadow:8.1.1'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'java'
apply plugin: 'net.kyori.blossom'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.spongepowered.mixin'

version = "${minecraft_version}-${mod_version}"
group = mod_base_package
archivesBaseName = mod_id



java.toolchain.languageVersion = JavaLanguageVersion.of(8)

minecraft {

    mappings channel: mappings_channel, version: mappings_version

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    legacy {
        fixClasspath = true
        extractMappings = true
        attachMappings = true
    }

    runs {
        client {
            workingDirectory project.file('run/client')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets {
    main {
        resources {
            srcDir 'src/generated/resources'
        }
        blossom {
            resources {
                property("mod_id", mod_id)
                property("mod_name", mod_name)
                property("mod_description", mod_description)
                property("mod_version", mod_version)
                property("mod_authors", mod_authors)
                property("minecraft_version", minecraft_version)
            }
            javaSources {
                property("MODNAME", mod_name)
                property("MODID", mod_id)
                property("VERSION", version)
            }
        }
    }
}

mixin {
    add sourceSets.main, mod_id + ".mixins.refmap.json"
}

repositories {
    maven {
        name 'Cleanroom Maven'
        url 'https://maven.cleanroommc.com/'
    }
    mavenCentral()
}



dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    shadow 'net.sf.jazzy:jazzy:0.5.2-rtext-1.4.1-2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.1'

    // Common:
    annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'
    annotationProcessor 'com.google.guava:guava:32.1.2-jre'
    annotationProcessor 'com.google.code.gson:gson:2.8.9'

    // ForgeGradle:
    implementation ('zone.rong:mixinbooter:8.9') {
        transitive = false
    }
    annotationProcessor ('zone.rong:mixinbooter:8.9') {
        transitive = false
    }
     
}


jar {
    manifest {
        attributes([
                'Specification-Title': mod_id,
                'Specification-Vendor': mod_authors,
                'Specification-Version': '1', // We are version 1 of ourselves
                'FMLCorePluginContainsFMLMod': true,
                //'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'FMLCorePlugin': 'mnm.mods.tabbychat.TabbyChatLoadingPlugin',
                'ForceLoadAsMod': true,
                //'FMLAT': '',
                'Implementation-Title': project.name,
                'Implementation-Version': mod_version,
                'Implementation-Vendor': mod_authors,
                'Implementation-Timestamp': new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ')
        ])
    }
    //finalizedBy('reobfJar')
    archiveClassifier = "thin"
}

shadowJar {
    archiveClassifier = "shadow"
    configurations = [project.configurations.compileClasspath]
    dependencies {
        include(dependency("net.sf.jazzy:jazzy:0.5.2-rtext-1.4.1-2"))
    }
    
    manifest {
        inheritFrom(project.tasks.jar.manifest)
    }

    finalizedBy 'reobfShadowJar'
}

reobf {
    shadowJar {}
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
